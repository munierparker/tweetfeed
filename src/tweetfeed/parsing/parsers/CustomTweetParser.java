/*
 * TweetFeed. Munier Parker, 2016.
 */
package tweetfeed.parsing.parsers;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.tree.ParseTreeWalker;
import tweetfeed.TweetFeed;
import tweetfeed.parsing.antlrgenerated.tweet.TweetListLexer;
import tweetfeed.parsing.antlrgenerated.tweet.TweetListParser;
import tweetfeed.parsing.listeners.TweetParseTreeListener;

/**
 *
 * @author Munier
 *
 * This is a Custom parser designed to parse the weet.txt file. See the ANTLR grammar in TweetList.g4 in
 * twitterfeed.grammars.
 *
 * ANTLR is a tool that is used to define a set of grammar rules. The grammar rules then instruct ANTLR to generate a
 * lexical analyser and parser to recognise sentences in that specific grammar.
 *
 * ANTLR was used so that even if the requirements change and the grammar has to be extended or made really complex to
 * define user relationships with tweets, then it can be easily extended and modified.
 *
 * In this way, not only is the parser extremely powerful, efficient and extendable, but the UserParsable interface
 * decoupled the Parser implementation from JobConsumer so that any part can be swopped out and changed.
 */
public class CustomTweetParser implements TweetParsable {

    private File tweetFile;  //The file containing the tweet relationship

    /**
     * Create a new Custom TWeet File Parser
     *
     * @param tweetFile the File pointing to the tweet.txt file
     */
    public CustomTweetParser(File tweetFile) {
        this.tweetFile = tweetFile;
    }

    /**
     * Parse the tweet.txt file using the Lexical Analyser and Parser generated by ANTLR using the TweetList.g4 grammar
     * in tweetfeed.
     */
    @Override
    public void parseTweetFile() {
        FileInputStream tweetFileInputStream = null;

        try {
            //create an input stream to read the contents
            tweetFileInputStream = new FileInputStream(tweetFile);
            //Creating a lexical analyser with the stream
            TweetListLexer tweetLexer = new TweetListLexer(new ANTLRInputStream(tweetFileInputStream));

            //Get a list of matched tokens from the lexer
            CommonTokenStream tweetTokens = new CommonTokenStream(tweetLexer);
            // Pass tokens to the parser
            TweetListParser tweetParser = new TweetListParser(tweetTokens);
            //Create a listener for the correct events are needed to extract the tokens into User Objects
            TweetParseTreeListener tweetParseTreeListener = new TweetParseTreeListener(tweetLexer);
            // This is the entry point in the grammar
            TweetListParser.TweetContext tweetContext = tweetParser.tweet();
            // Create a walker
            ParseTreeWalker walker = new ParseTreeWalker();
            //walk the parse tree and listen for the necessary events
            walker.walk(tweetParseTreeListener, tweetContext);
            TweetFeed.Echo("Parsing '" + tweetFile.getName() + "' ... DONE.");

        } catch (FileNotFoundException ex) {
            TweetFeed.TweetLogger.log(Level.SEVERE, ex.getMessage());
            TweetFeed.Echo(ex.getMessage());
        } catch (IOException e) {
            TweetFeed.TweetLogger.log(Level.SEVERE, e.getMessage());
            TweetFeed.Echo(e.getMessage());
        } catch (RecognitionException re) {
            TweetFeed.TweetLogger.log(Level.SEVERE, re.getMessage());
            TweetFeed.Echo(re.getMessage());
        } finally {
            if (tweetFileInputStream != null) {
                try {
                    tweetFileInputStream.close();
                } catch (IOException e) {
                    TweetFeed.TweetLogger.log(Level.SEVERE, e.getMessage());
                    TweetFeed.Echo(e.getMessage());

                }
            }
        }
    }

}
